<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href=""></a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="nav-menu">
        <div class="nav-item">
            <button class="@_friendBtnCss" @onclick="HandleFriendButtonClick">
                <span class="oi oi-home" aria-hidden="true"></span>
            </button>
        </div>
        <div class="nav-item">
            <button class="@_chatBtnCss" @onclick="HandleChatButtonClick">
                <span class="oi oi-plus" aria-hidden="true"></span>
            </button>
        </div>
        <div class="nav-item">
            <button class="@_userBtnCss" @onclick="HandleUserButtonClick">
                <span class="oi oi-list-rich" aria-hidden="true"></span>
            </button>
        </div>
    </nav>
</div>

@code {
    /// <summary>
    /// 画面表示機能切り替えコールバック
    /// </summary>
    [Parameter]
    public EventCallback<short> SwtchingFunctionCallback { get; set; }

    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    /// <summary>
    /// ナビゲーションボタンデフォルトCSS
    /// </summary>
    private const string _defaultNavButtonCss = "";

    /// <summary>
    /// ナビゲーションボタンアクティブ時のCSS
    /// </summary>
    private const string _activeNavButtonCss = "active";

    /// <summary>
    /// 友達一覧ボタンCSS
    /// </summary>
    private string _friendBtnCss = _defaultNavButtonCss;

    /// <summary>
    /// チャットルームボタンCSS
    /// </summary>
    private string _chatBtnCss = _defaultNavButtonCss;

    /// <summary>
    /// 友達追加ボタンCSS
    /// </summary>
    private string _userBtnCss = _defaultNavButtonCss;

    /// <summary>
    /// 友達一覧ボタン押下時処理
    /// </summary>
    private void HandleFriendButtonClick()
    {
        // 友達一覧に画面切り替え
        SwtchingFunction(CLDEF.FNC_ID_FRIEND);
        // ナビゲーションメニューボタンCSS初期化処理
        InitNavButtonCss();
        // 友達一覧ボタンをアクティブにする
        _friendBtnCss = _activeNavButtonCss;
    }

    /// <summary>
    /// チャットルームボタン押下時処理
    /// </summary>
    private void HandleChatButtonClick()
    {
        // チャットルームに画面切り替え
        SwtchingFunction(CLDEF.FNC_ID_CHAT);
        // ナビゲーションメニューボタンCSS初期化処理
        InitNavButtonCss();
        // チャットルームボタンをアクティブにする
        _chatBtnCss = _activeNavButtonCss;
    }

    /// <summary>
    /// 友達追加ボタン押下時処理
    /// </summary>
    private void HandleUserButtonClick()
    {
        // 友達追加に画面切り替え
        SwtchingFunction(CLDEF.FNC_ID_USER);
        // ナビゲーションメニューボタンCSS初期化処理
        InitNavButtonCss();
        // 友達追加ボタンをアクティブにする
        _userBtnCss = _activeNavButtonCss;
    }

    /// <summary>
    /// ナビゲーションメニューボタンCSS初期化処理
    /// </summary>
    private void InitNavButtonCss()
    {
        _friendBtnCss = _defaultNavButtonCss;
        _chatBtnCss = _defaultNavButtonCss;
        _userBtnCss = _defaultNavButtonCss;
    }

    /// <summary>
    /// 機能切り替え処理
    /// </summary>
    /// <param name="functionId">機能ID</param>
    private async void SwtchingFunction(short functionId)
    {
        // Main.Razorの機能切り替え処理にコールバック通知
        await SwtchingFunctionCallback.InvokeAsync(functionId);
    }
}
